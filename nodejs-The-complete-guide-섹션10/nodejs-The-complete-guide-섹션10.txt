sql
table, record

no sql 
table 이 아닌 collections라고 한다. record를 찾지않고 document를 찾는다.

document는  json같아보임. 
strict schema가 없음. 

다른 스트럭쳐를 가질수 있음. 
duplicate Data

관계를 맺지 않고 데이터를 복사해서 놔두게 된다? 

관계를 가진 데이터가 변경될시 관계된 두곳을 모두 업데이트 하게 된다. 
이건 어드벤티지를 준다. retrieve data
dont have to join multiple tables 
together which can lead to ver long, difficult code
impact performance 

read할때. 
super fast way. one of the huge advantages of Nosql 

we can relate documents in some way
no or only a few connections and  instead try to copy data and have a collection 

horizontal and vertical scaling 이 sql과 nosql에서 다른다. 

----------

horizontal scaling은 간단히 server를 많이 추가하는것. 무한대로 가
can always buy new servers, cloud or data center
connect to database 
이건 쿼리, 머지하는 프로세스가 필요하다. 

그래서 쉽지 않지만 좋은 scaling 방법. 

vertical scaling은 간단히 existing server를 강하게 만들고 CPU or memory를 dropdown의 옵션으로 선택해서 추가 가능하다.

pay more then done! 하지만 문제는 한계가 있다는 것이다. 한개의 머신에서 CPU를 무한대로 사용할수 없다.



--- sql은 
schemas, realations 두개의 주요 성격을 가진다.

데이터는 많은 테이블에 타입별로 분류되어 있고, 관계로 연결되어 있다. 

horizontal scaling often is very difficult or even impossible

can add more servers 

하지만 그들을 모두 data cloud, database를 이용해서 공유하기란 어렵고.

vertical scaling is can make server stronger 

하지만 서버를 추가하는건 어렵고 심지어 불가능할수도 있다. 

trivial 하지 못하다. 

complex joins과 관계 테이블은 한계에 도달할수 있고 best choice가 아닐수 있다. 


--- no sql은
스키마가 없고 a few relations를 가지고, data는 타입별로 구분되지 않고, 다중 collections로 구성된다.

하지만 반대로 merged, nested documents 가 존재하는 document를 가지고 일할때.

collections를 application 타입별로 사용해야한다. 


horizontal scaling is easier 

니가 할줄 알아야 하지만, cloud providers가 다해준다. 
그래서 우리는 ins, outs를 어떻게 하는지 몰라도 된다. 

그래서 성능이 좋아지고, mass read, write requests를 very performant, high throughput 할수 있다. 

하지만 관계가 중요하거나 split up across tables와 strong schemas가 필요하면 SQL이 perfect하다.

유저 데이터가 자주 변하지 않으면 SQL이 좋다. 

쇼핑 주문 등 종종 변하는 부분에서는 NoSQL이 좋다. 

관계가 중요하지 않으면. 항상 모든 쇼핑 주문 정보를 put 할수 있다. 

심지어 유저 정보도 저장 할수 있고. document를 건드릴 필요가 없다. 

왜냐면 유저가 그의 사진을 수정하거나  주문에 대해서 항상 저장 하지 않을 테니까. 

nodejs와 SQL을 어떻게 쓰는지 알아야 한다. 

MySQL interact  


------------------











