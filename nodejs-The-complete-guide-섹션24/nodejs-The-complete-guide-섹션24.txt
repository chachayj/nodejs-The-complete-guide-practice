REST API

왜 사용 하고 무엇인가

모든 Frontend가 HTML, 탬플릿 엔진을 사용 하지 않는다. 
모바일 앱, 싱글 페이지 웹 앱, service APIs

그러므로 데이터만을 필요로 한다. 이를 위해서 Rest API를 설계한다.

여러가지 다른 종류의 response가 필요하기 때문에

서버안의 로직과는 상관없이 데이터 포맷을 통일화 시키는 것이 목적. 

-- Data formats
1. HTML = data + structure, css, elements, page와 code를 리턴함. 불필요한 데이터가 많다.
그래서 parse하기 어렵다. 
2. Plain Text = only data, no UI 하지만 사람을 위한 text이다. 컴퓨터를 위한 text가아님. 

3. XML = tags, 컴퓨터가 이해하기도 좋다. 하지만 special xml parser가 필요함. 
처리하기 위한 overhead가 있다. a lot of extra text 

4. JSON = just data, 컴퓨터 인식 가능, javascript object 기반. 

--------------Routing
전통 방식에선 links와 form을 보냈다. 
Rest에선 http method를 호출한다.  
이 reqeust는 클라이언트가 async 리퀘스트로 보내며 fetch API, AJAX 방식으로 
클라이언트도 special 하다. html response를 기대하지 않고 
http method와 path를 호출한다. 

API endpoint의 네이밍에 기대되는 logic으로 서버가 실행되어야 한다.

------- http methods  
links와 forms만 보낸다면 get과 post만을 사용해도 괜찮다. 
Get = get a resource
Post = create, append (never overwrite or should never overwrite)
Put = create, overwrite
Patch = updating parts, not overwrite
Delete = delete a resource 

------ Principles
1. uniform interface = req, res data structure가 명확해야한다. 예측할수 있도록 
2. stateless interactions = super important with authentication
rest API를 설계 할때 server와 client는 완전히 분리되어 있다. 
common history를 공유하지 않는다. 
no connection history is stored and no sessions will be used
히스토리가 저장되지 않고 세션이 사용되지 않는다. 
왜냐면 모든 리퀘스트가 no prior req로 취급되어서 
서버는 모든 req를 스스로 본다. 
세션을 저장하지 않고, client를 상관하지 않는다. 

3. cacheable  
클라이언트에게 response가 얼마동안 valid 되는지를 header에 알려줘야 한다. 
4. Client-Server 
분리, client는 db에 저장되는걸 신경쓰지 않아도 된다. server가 책임진다.
5. Layered System
다른서버에 전달해야 할때 
data만을 신경쓰면 된다. 
API로서 제공되어야 한다. 
6. Code on Demand
Rest API도 실행가능한 코드를 클라이언트에게 보낼수 있다. 
하지만 현실적으론 종종볼순 없다. 



---- CORS 
cross origin resource sharing
기존 XMLhttpReqeust는 보안상 이유로 같은 도메인만을 허용했음. 
Rest API 방식에선 client간의 도메인이 다를수 있으므로 CORS가 필요하게 되었음. 

--- 종류 4가지 
--------- Simple Request
3가지를 만족해야함
1. GET, HEAD, POST 중 한 가지 방식을 사용
2. POST일 경우 Content-type이 아래 셋 중 하나를 만족
- application/x-www-form-urlencoded
- multipart/form-data
- text/plain
3. 커스텀 헤더를 전송하지 않아야 함

Simple Request는 매우 간단한 형태로 요청되고 응답. 
Access-Control-Allow-Origin: * 으로 설정해서 모든 도메인 접근이 가능하게 함.
Access-Control-Allow-Origin: test.example 이런식으로 제한도 가능. 

--------- Preflight Request
preflight(예비) 요청을 먼저 보내고 서버가 이에 응답 가능한지 확인. 
OPTION 메소드로 HTTP 요청을 전송. 이후 실제 Actual 요청을 보냄. 
이에 서버가 응답하는 형태로 통신. 

Simple Request에 해당하는 조건에 만족하면 안된다. 
GET, HEAD, POST 이외 메소드를 사용하는 경우에만 사용 가능. 또는 커스텀 헤더를 사용할 경우 사용 할수 있음. 
Access-Control-Request-Method: POST는 이후 본 요청에서 POST 메소드가 
전달 될 것을 미리 알려주는 역할
Access-Control-Request-Headers: X-PINGOTHER는 본 요청에서 전달될 헤더 정보를
포함하고 X-PINGOTHER이라는 커스텀 헤더가 전송될 예정이란 것을 표기 

응답은 
Access-Control-Allow-Origin: http://foo.example
Access-Control-Allow-Methods: POST, GET, OPTIONS
Access-Control-Allow-Headers: X-PINGOTHER
이런 형식으로 응답.


--------- Credential Request
HTTP Cookie와 HTTP Authentication 정보를 인식할 수 있게 해주는 요청
요청 시 xhr.withCredentials = true를 지정하는 것이 가장 큰 특징

Access-Control-Allow-Credentials: true
만약 위의 설정이 false라면? 브라우저는 이 요청을 거부

거부 할 때는 거부되었다는 어떠한 메시지도 전달하지 않는다. Response가 없다.



--------- Non-Credential Request
withCredentials 플래그는 디폴트 값이 false

Credential 요청에서와 같이 처리해주지 않는다면 모든 요청이 Non-Credential에 해당








즉 csrf 토큰을 사용할수 없는것 같음?? 
왜냐면 csrf토큰은 웹페이지 html 방식에서 사용 . 

그러므로 사용하는게 oauth 2.0 인듯함. 








rest API or rest stands for 
Representaional State Transfer
the simple translation i like to use is that we transfer data instead of user interface

instead of html, we just transfer data and we leave it to the client or to the frontend,
be that a mobile app, be that a single page application

we leave it to that frontend to then do with this data whatever it wants to do.
(키 포인트)
a decoupled frontend or you might need to and then rest APIs are the solution. 

only the response and the request data changes but not the general server side logic

you do that in exactly the same way when building a Rest API and that is really important to me because

often, Rest APIs and traditional web apps where you render the views on the server are seen as

two totally different things.

they only differ in the response and in the kind of data you expect but they dont differ

what happens on the server

data format은 json이 이겼다. 





Reason for using Rest API
Not every Frontend (UI) requires HTML Pages

ex) 
Mobile Apps == Java, swifts, C IOS 

Single page web app  

Service APIs

it's not the frontend that requires us to build a rest API on own 

but this is another example for a case
where you only need the data and no user interface

we just have a backend that needs to serve us data and 
that is a core idea or that is the core idea of building rest api

APIs becuase there we need a different kind of response. And rest API or rest stands for 
Representaional State Transfer
the simple translation i like to use is that we transfer data instead of user interface





